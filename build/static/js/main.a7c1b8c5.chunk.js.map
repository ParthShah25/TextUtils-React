{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","a","component1","component2","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","arr","split","i","length","charAt","slice","join","About","myStyle","setMyStyle","btnText","setBtnText","class","border","for","defaultProps","component3","component4","App","setMode","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0OAIe,SAASA,EAAOC,GAC7B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SAEGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASA,sBAAMJ,UAAU,0BAEhB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,qBAAIL,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMM,GAAC,EAACN,UAAU,kBAAkB,eAAa,OAAOE,GAAG,IAA3D,SACGH,EAAMQ,eAGX,oBAAIP,UAAU,WAAd,SACE,cAAC,IAAD,CAAMM,GAAC,EAACN,UAAU,WAAWE,GAAG,SAAhC,SACCH,EAAMS,kBAIX,sBAAKR,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACI,uBAAOD,UAAU,mBAAmBS,QAASV,EAAMW,WAAYN,KAAK,WAAWC,GAAG,2BAClF,wBAAOL,UAAU,mBAAmBW,QAAQ,yBAA5C,uBAA6F,UAAbZ,EAAME,KAAe,OAAO,sBCpC7G,SAASW,EAASb,GAE7B,IA6CA,EAAwBc,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,qCACA,sBAAKf,UAAU,YAAYgB,MAAO,CAACC,MAAqB,SAAblB,EAAME,KAAc,QAAQ,SAAvE,UACI,6BAAKF,EAAMmB,UACX,sBAAKlB,UAAU,OAAOK,GAAG,QAAzB,UACI,uBAAOM,QAAQ,8BAA8BX,UAAU,eACvD,0BAAUA,UAAU,eAAemB,MAAOL,EAAMM,SArDrC,SAACC,GACpBN,EAAQM,EAAMC,OAAOH,QAoD6DH,MAAO,CAACO,gBAA+B,UAAbxB,EAAME,KAAe,QAAQ,QAASI,GAAG,8BAA8BmB,KAAK,UAEpL,wBAAQpB,KAAK,SAASK,QAlDR,WAClB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,IAgD0CzB,UAAU,kBAAxD,oCAEA,wBAAQI,KAAK,SAASK,QA9CP,WACnB,IAAIgB,EAAUX,EAAKa,cACnBZ,EAAQU,IA4C2CzB,UAAU,uBAAzD,oCACA,wBAAQI,KAAK,SAASK,QAzCL,WAErB,IADA,IAAImB,EAAMd,EAAKe,MAAM,KACZC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC5BF,EAAIE,GAAKF,EAAIE,GAAGE,OAAO,GAAGN,cAAgBE,EAAIE,GAAGG,MAAM,GAE3D,IAAIR,EAAUG,EAAIM,KAAK,KACvBnB,EAAQU,IAmC6CzB,UAAU,uBAA3D,wBACA,wBAAQI,KAAK,SAASK,QAhCJ,WACtB,IAAIgB,EAAUX,EAAKe,MAAM,QACzBd,EAAQU,EAAQS,KAAK,OA8BiClC,UAAU,uBAA5D,iCAEA,wBAAQI,KAAK,SAASK,QArBL,WAErBM,EADc,MAoBuCf,UAAU,uBAA3D,gCAEJ,sBAAKA,UAAU,iBAAiBgB,MAAO,CAACC,MAAqB,SAAblB,EAAME,KAAc,QAAQ,SAA5E,UACI,wDACA,wCAAWa,EAAKe,MAAM,KAAKE,OAA3B,oBAAoDjB,EAAKiB,UACzD,iEAAoC,KAAQjB,EAAKe,MAAM,KAAKE,OAA5D,UACA,2CACA,4BAAIjB,EAAKiB,OAAO,EAAEjB,EAAK,0DCtEpB,SAASqB,IAEpB,MAA8BtB,mBAAS,CACnCI,MAAO,QACPM,gBAAiB,UAFrB,mBAAOa,EAAP,KAAgBC,EAAhB,KAKA,EAA8BxB,mBAAS,oBAAvC,mBAAOyB,EAAP,KAAgBC,EAAhB,KAsBF,OACE,sBAAKvC,UAAU,iBAAiBgB,MAAOoB,EAAvC,UACI,0CACF,sBAAKpC,UAAU,YAAYK,GAAG,mBAA9B,UACE,sBAAKL,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBK,GAAG,aAApC,SACE,wBACEL,UAAU,mBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,eACf,gBAAc,OACd,gBAAc,cACdY,MAAOoB,EAPT,iCAYF,qBACE/B,GAAG,cACHL,UAAU,mCACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBgB,MAAOoB,EAAvC,UACE,8EADF,qXAOmC,mDAPnC,uDAYJ,sBAAKpC,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBK,GAAG,aAApC,SACE,wBACEL,UAAU,6BACVI,KAAK,SACL,iBAAe,WACf,iBAAe,eACf,gBAAc,QACd,gBAAc,cACdY,MAAOoB,EAPT,iCAYF,qBACE/B,GAAG,cACHL,UAAU,8BACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBgB,MAAOoB,EAAvC,UACE,+EADF,sXAOmC,mDAPnC,uDAYJ,sBAAKpC,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBK,GAAG,eAApC,SACE,wBACEL,UAAU,6BACVI,KAAK,SACL,iBAAe,WACf,iBAAe,iBACf,gBAAc,QACd,gBAAc,gBACdY,MAAOoB,EAPT,iCAYF,qBACE/B,GAAG,gBACHL,UAAU,8BACV,kBAAgB,eAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBgB,MAAOoB,EAAvC,UACE,8EADF,sXAOmC,mDAPnC,0DAaN,sBAAKI,MAAM,mCAAmC/B,QAzH7B,WAEO,UAAlB2B,EAAQnB,OACRoB,EAAW,CACPpB,MAAO,QACPM,gBAAiB,QACjBkB,OAAQ,gBAEZF,EAAW,uBAIXF,EAAW,CACPpB,MAAO,QACPM,gBAAiB,UAErBgB,EAAW,uBAyGjB,UACM,uBAAOC,MAAM,mBAAmBpC,KAAK,WAAWC,GAAG,2BACnD,uBAAOmC,MAAM,mBAAmBE,IAAI,yBAApC,SAA8DJ,UFjE1ExC,EAAO6C,aAAe,CAClBxC,MAAQ,iBACRI,WAAa,OACbC,WAAa,QACboC,WAAa,WACbC,WAAa,c,WG9DFC,EAEf,WAEE,MAAwBjC,mBAAS,SAAjC,mBAAOZ,EAAP,KAAa8C,EAAb,KAaA,OACE,mCACA,eAAC,IAAD,WACE,cAACjD,EAAD,CAAQK,MAAQ,YACRI,WAAa,OACbC,WAAa,QACbP,KAAQA,EACRS,WAlBO,WACL,UAAPT,GACD8C,EAAQ,QACRC,SAASC,KAAKjC,MAAMO,gBAAkB,YAGtCwB,EAAQ,SACRC,SAASC,KAAKjC,MAAMO,gBAAkB,YAYxC,qBAAKvB,UAAU,mBACb,eAAC,IAAD,WACI,cAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAChB,EAAD,MAEF,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAlB,SACE,qBAAKnD,UAAU,iBAAf,SACE,cAACY,EAAD,CAAUM,QAAU,wBAAwBjB,KAAQA,iBC5CpE,IAYemD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAG1BZ,M","file":"static/js/main.a7c1b8c5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {/* for change in future */}\r\n            {props.title}  \r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link a className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  {props.component1}\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link a className=\"nav-link\" to=\"/About\">\r\n                {props.component2}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Switch to {props.mode==='light'?'dark':'light'}</label>\r\n            </div>\r\n\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  );\r\n}\r\n\r\n// how to use propTypes in React  \r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    component1 : PropTypes.string.isRequired,\r\n    component2 : PropTypes.string.isRequired,\r\n    component3 : PropTypes.string.isRequired,\r\n    component4 : PropTypes.string.isRequired,\r\n}\r\n\r\n\r\n// for by default name\r\nNavbar.defaultProps = {\r\n    title : \"Set Yout Title\",\r\n    component1 : \"Home\",\r\n    component2 : \"About\",\r\n    component3 : \"Services\",\r\n    component4 : \"Contact us\",\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    //All the character converted to Upper case\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase()\r\n        setText(newText);\r\n    }\r\n    \r\n    //All the character converted to lower case\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase()\r\n        setText(newText);\r\n    }\r\n    \r\n    // Capitalize the first letter of each word in a string\r\n    const handleTitleClick = () => {\r\n        let arr = text.split(\" \")\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\r\n        }\r\n        let newText = arr.join(\" \") \r\n        setText(newText)\r\n    }\r\n    \r\n    // Remove Extra Spaces\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n    }\r\n\r\n    //Copy the whole paragraph\r\n    // const handleCopy = () => {\r\n    //     var text = document.getElementById(\"myBox\");\r\n    //     text.select();\r\n    //     navigator.clipboard.writeText(text.value);\r\n    // }\r\n    \r\n    // Clear the container\r\n    const handleClearClick = () => {\r\n        let newText = \" \"\r\n        setText(newText);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h3>{props.heading}</h3>\r\n            <div className=\"mb-3\" id=\"myBox\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"></label>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor : props.mode==='light'?'white':'grey'}} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button type=\"button\" onClick={handleUpClick} className=\"btn btn-primary\">Converts to Upper Case\r\n            </button> \r\n            <button type=\"button\" onClick={handleLowClick} className=\"btn btn-primary mx-1\">Converts to Lower Case</button>\r\n            <button type=\"button\" onClick={handleTitleClick} className=\"btn btn-primary mx-1\">Title case</button>\r\n            <button type=\"button\" onClick={handleExtraSpaces} className=\"btn btn-primary mx-1\">Remove Extra Spaces</button>\r\n            {/* <button type=\"button\" onClick={handleCopy} className=\"btn btn-primary mx-1\">Copy Your Text</button> */}\r\n            <button type=\"button\" onClick={handleClearClick} className=\"btn btn-primary mx-1\">Clear Your Text</button>\r\n        </div>\r\n        <div className=\"container my-4\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your Text Summary is: </h2>\r\n            <p>Words: {text.split(\" \").length} and Characters: {text.length}</p>\r\n            <p>You can read this Paragraph by: {0.008 * text.split(\" \").length} WPM</p>\r\n            <h2>Preview: </h2>\r\n            <p>{text.length>0?text:\"Enter any Words in above Textarea to Preview it\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    \r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    const toggeStyle = () => {\r\n        \r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: 'solid white'\r\n            })\r\n            setBtnText(\"Enable White Mode\")\r\n        }\r\n        \r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Black Mode\")\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container my-4\" style={myStyle}>\r\n        <h2>About us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" >\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-check form-switch my-3 mx-1\" onClick={toggeStyle}>\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">{btnText}</label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from './components/About';\nimport React, {useState} from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n// import About from \"./components/About\";\nexport default App;\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n\n  const toggleMode = () => {\n      if(mode==='light'){\n        setMode('dark');\n        document.body.style.backgroundColor = '#042743';\n      }\n      else{\n        setMode('light');\n        document.body.style.backgroundColor = 'white';\n      }\n  }\n\n  return (\n    <>\n    <Router>\n      <Navbar title = \"TextUtils\" \n              component1 = \"Home\"\n              component2 = \"About\"\n              mode = {mode}\n              toggleMode = {toggleMode}/>\n      <div className=\"container my-3\"></div>\n        <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route> \n            <Route exact path=\"/\">\n              <div className=\"container my-4\">\n                <TextForm heading = \"Enter Your Text Below\" mode = {mode}/>\n              </div>\n            </Route>\n        </Switch>\n    </Router>\n\n      {/* when we forgot to use any name for props item */}\n      {/* <Navbar/> */}\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}